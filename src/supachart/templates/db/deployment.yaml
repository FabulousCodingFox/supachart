apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "supachart.db.fullname" . }}
  labels: {{- include "supachart.labels" . | nindent 4 }}
spec:
  strategy:
    type: Recreate
  replicas: 1 # There is no scaling support for the database, it should always run as a single instance
  selector:
    matchLabels: {{ include "supachart.db.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{ include "supachart.db.selectorLabels" . | nindent 8 }}
      annotations: {{- toYaml .Values.db.deployment.annotations | nindent 8 }}
    spec:
      {{- if .Values.db.serviceAccount.enabled }}
      serviceAccountName: {{ include "supachart.db.serviceAccountName" . }}
      {{- end }}
      securityContext: {{- toYaml .Values.db.deployment.securityContext | nindent 8 }}
      initContainers:
        - name: docker-compatibility
          image: {{ .Values.db.deployment.image }}
          imagePullPolicy: {{ .Values.db.deployment.imagePullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Copy pgsodium stuff if it doesnt exists yet (Don't overwrite existing files)"
              if [ ! -f /mnt/postgresql-custom/supautils.conf ]; then
                cp -a /etc/postgresql-custom/. /mnt/postgresql-custom/
              fi

              echo "Ensure the data directory has the correct permissions"
              chown -R 105:106 /mnt/postgresql-data
              chmod 750 /mnt/postgresql-data
          volumeMounts:
            - mountPath: /mnt/postgresql-custom
              name: data
              subPath: config/
            - mountPath: /mnt/postgresql-data
              name: data
              subPath: data/
      containers:
        - name: {{ include "supachart.db.name" . }}
          image: {{ .Values.db.deployment.image }}
          imagePullPolicy: {{ .Values.db.deployment.imagePullPolicy }}
          livenessProbe:
            exec:
              command: ["pg_isready", "-U", "postgres", "-h", "localhost"]
            periodSeconds: 5
            timeoutSeconds: 5 
            failureThreshold: 3
          startupProbe:
            exec:
              command: ["pg_isready", "-U", "postgres", "-h", "localhost"]
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 10000
          ports:
            - containerPort: 5432
              name: postgres
          securityContext:
            # docker run --rm -it supabase/postgres:15.8.1.060 id postgres
            runAsUser: 105
            runAsGroup: 106
          command: ["/usr/local/bin/docker-entrypoint.sh"]
          args: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf", "-c", "log_min_messages=fatal"]
          volumeMounts:
            - mountPath: /etc/postgresql-custom
              name: data
              subPath: config/
            - mountPath: /var/lib/postgresql/data
              name: data
              subPath: data/
          env:
            - name: POSTGRES_HOST
              value: /var/run/postgresql
            - name: PGPORT
              value: "5432"
            - name: POSTGRES_PORT
              value: "5432"
            {{- include "supachart.env" (dict "name" "PGPASSWORD"        "path" .Values.db.password ) | nindent 12 }}
            {{- include "supachart.env" (dict "name" "POSTGRES_PASSWORD" "path" .Values.db.password ) | nindent 12 }}
            {{- include "supachart.env" (dict "name" "PGDATABASE"        "path" .Values.db.database ) | nindent 12 }}
            {{- include "supachart.env" (dict "name" "POSTGRES_DB"       "path" .Values.db.database ) | nindent 12 }}
            {{- include "supachart.env" (dict "name" "JWT_SECRET"        "path" .Values.auth.jwt.secret ) | nindent 12 }}
            {{- include "supachart.env" (dict "name" "JWT_EXP"           "path" .Values.auth.jwt.expiry ) | nindent 12 }}
      volumes:
        - name: data
          persistentVolumeClaim:
           claimName: {{ include "supachart.db.fullname" . }}